Brick in BD Depot
#################

Brick is a uniform metadata schema/ontology for smart buildings. The motivtion behind Brick was to bridge the gap between the various commerical building metadata schemas, with a single uniform metadata schema that was easy to use and understand. 

Brick
###############
General information about Brick can be found at http://brickschema.org/papers/Brick-BuildSys2016.pdf or at https://github.com/BuildSysUniformMetadata/GroundTruth. Brick is a collaborative effort, first conveived at BuildSys 2015, and first published in BuildSys 2016. Ongoing work on Brick includes expansions of the metadata ontology, better tooling for easier use, and working with industry groups to put Brick in practice. 


Practical Brick in Building Depot
################################
The most important element of including Brick into Building Depot is the representation of the graphical Brick ontology in the Building Depot tag system. Previously, Building Depot used a simple tag-value assigned to UUID to assign values to various sensors. In other words, a set of nodes with information associated with them. With Brick, such tags can still exist, but Brick in BD also allows for connections between nodes, with values of certain tags being the UUID's of other sensors or Brick entities. 

This is accomplished by providing the UUID of the 'target' sensor to the tag assigned to the nominitative sensor. 

E.g. 
<Nominative UUID> <tag> <Target UUID>.

This effectively allows for creating the triple structure that encodes Brick in the Building Depot tag infrastructure.  


Don't Want ot Work with Brick?
################################
If you just love Building Depot, but aren't really a fan of Brick, that's okay! As stated above, the system is designed to allow for largely the same tag-functionality as Building Depot without Brick. Simply specificy your tags as normal. 

The only key difference is in the UUID generation processs. In this new release, the UUID of an object is generated by a combination of a user-provided object name and a user-provided object type. The first of these is a required field, the second will default to 'BasicBD'. UUIDs will be generated as Object-Type:Object-Name. It is a requirement that these combinations be unique. 

 
